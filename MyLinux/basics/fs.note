#note

在“etc/bin”中的“etc”真正代表的是“etcetera”(附加物)。在
早期的Unix系统中，最为重要的目录是“bin”目录 (“bin”是
“binaries”二进制文件――编译后的程序的缩写)，“etc”中则包
含琐碎的程序，如启动、关机和管理。运行一个Linux必须的东
西的列表是:一个二进制程序，etcetera，etcetera――换句话说，
是一个底层的重要项目，通常添加一些次等重要的零碎事物。
今天， “etc”包含了广泛的系统配置文件，这些配置文件几乎
包含了系统配置的方方面面，同样非常重要。

#配置文件，包含所有应用程序的配置文件，也包括启动和关闭
特定程序的脚本
/etc

#存放linux系统启动时需要加载的文件，包括kernel，grub等
/boot

#可增长目录，包含很多经常变化的文件，如/var/log（系统日志），/var/lib（包文件）
/var

#管理员数据存放目录，相当于root用户的家目录
/root

#临时文件存储目录
/tmp

#usr 表示 unix software source
/usr

#命令 此目录包含二进制可执行文件
/bin

#系统命令 此目录中的命令主要供系统管理员使用，以进行系
统维护，如 iptables，reboot，fdisk等
/sbin

#挂载目录，系统管理员可用于临时挂载文件系统
#实际上挂载点对操作没有影响
/mnt

#包含设备文件，在Linux下，终端设备，usb，磁盘等都被看作
文件，如/dev/sda
/dev

#普通用户所有数据存放在该目录下
/home

#这个目录是一个虚拟的目录，它是系统内存的映射，可以通过
直接访问这个目录获取系统信息。也就是说，这个目录的内容
不在硬盘而在内存里
/proc

#用于存放最基本的动态链接共享库，其作用类似于windows的
dll文件。几乎所有的应用程序都需要用到这些共享库

#~代表登陆用户的宿主目录

#文件基本权限
-    rw-        r--    r--    1 kernellmd kernellmd  1124 5月  20 16:53 vim.note
类型 拥有者权限 所属组 其他人   拥有者    属组       字节数

对于文件：r 读 w 写 x 执行
对于目录：r 读(看到目录里面有什么)  ls
          w 创建、删除、移动目录    touch mkdir rm mv cp
          x 进入                    cd
chmod #修改文件权限
u-w  user     拥有者  #拥有者减去w权限
g+x  group    组      #所属组增加x权限
o=r  other    其他人  #其他人的权限设为可读
#慎用=，会把其他权限都消除掉
a+x  all      所有人  #所有人都增加x权限
用户宿主目录下，对应用户拥有绝对权限
文件拥有者一定可以写文件，vim保存时用wq！
ll -d xxx/ #可以查看目录xxx的权限
-R参数 #递归的修改权限，用于目录(目录下的所有内容全部修改，否则只修改目录)
chmod u=rwx xxx #一次性修改多个权限

chown #修改文件拥有者和所属组
chown USER:GROUP xxx #修改拥有者和所属组 
如：chown kernellmd:kernellmd test.txt #修改test.txt的所属组和拥有者均为kernellmd
chown USER xxx       #修改拥有者
chown :GROUP xxx     #修改所属组
如：chown :sys test.txt #修改test.txt所属组为sys

设置文件默认权限的掩码：
系统用户：#umask 022
普通用户：#umask 002
#由/etc/bashrc 文件决定

计算方法：
文件默认权限=666-umask值  666-022=644
目录默认权限=777-umask值  777-022=755 #这是一种近似的记忆，不够准确

实际计算方法：
文件或目录初始权限     umask掩码
666                     033
110110110               000011011  #转换为二进制
                        111100100  #取反
110110110     &         111100100  #与运算
644 #结果

特殊权限
SUID       SGID       Stickybit
s对应的数值为：u：4； g：2； o：1
SUID #只能设置在二进制可执行程序上，对目录文本设置无效
     #功能：程序运行时权限从执行者变成程序所有者
如：chmod u+s /usr/bin/less #可以使用less正常查看/etc/passwd的内容
#以上命令等同于：chmod 4755 /usr/bin/less
SGID #即可设置二进制可执行程序，也可以设置目录
     #在设置了SGID权限的目录下建立文件时，新创建的文件的所属组会继承上级目录的所属组(-R参数只针对已创建过的文件)
chmod g+s xxx/  #xxx/目录拥有sgid权限
Stickybit  #只作用于目录
           #目录下所创建的文件只有root、文件创建者、目录所有者才能删除
chmod 777 xxx/
chmod o+t xxx/  #xxx/目录拥有t权限
或者 chmod 1777 xxx/ 也可以
