#shell script定义：
shell script 是利用 shell 的功能所寫的一個『程式 (program
)』，這個程式是使用純文字檔，將一些 shell 的語法與指令(含
外部指令)寫在裡面， 搭配正規表示法、管線命令與資料流重導
向等功能，以達到我們所想要的處理目的。

#note
在变量设置中，双引号仍然可以保有变量的内容，但单引号内仅
能是一般字符，而不会有特殊符号。

优先执行的命令建议选择$()，而不是返单引号``

env  #查看当前环境变量
set  #查看环境变量和bash内的其他变量

当时用bash或sh指令执行shell脚本时，会在子程序bash内执行，执行结束后子程序的资源被移除，父程序看不到
使用source或者.则会在父程序bash内执行，各动作会在bash内生效。

使用中括號必須要特別注意:
因為中括號用在很多地方，包括萬用字元與正規表示法等等，所以如果要在 bash 的語法當中使用中括號作為 shell 的判斷式時，必須要注意中括號的兩端需要有空白字元來分隔喔！

 script 針對參數已經有設定好一些變數名稱了！對應如下：
/path/to/scriptname  opt1  opt2  opt3  opt4
       $0             $1    $2    $3    $4

除了這些數字的變數之外， 我們還有一些較為特殊的變數可以在 script 內使用來呼叫這些參數喔！
$# ：代表後接的參數『個數』，以上表為例這裡顯示為『 4 』；

shift #对脚本后面所接的参数进行偏移
"$@" ：代表『 "$1" "$2" "$3" "$4" 』之意，每個變數是獨立的(用雙引號括起來)；
"$*" ：代表『 "$1c$2c$3c$4" 』，其中 c 為分隔字元，預設為空白鍵， 所以本例中代表『 "$1 $2 $3 $4" 』之意。

if条件表达式：
if单分支：

if [ 條件判斷式 ]; then
	當條件判斷式成立時，可以進行的指令工作內容；
fi   <==將 if 反過來寫，就成為 fi 啦！結束 if 之意！

if多重条件判断（双分支）：

# 一個條件判斷，分成功進行與失敗進行 (else)
if [ 條件判斷式 ]; then
	當條件判斷式成立時，可以進行的指令工作內容；
else
	當條件判斷式不成立時，可以進行的指令工作內容；
fi

多分支：

# 多個條件判斷 (if ... elif ... elif ... else) 分多種不同情況執行
if [ 條件判斷式一 ]; then
	當條件判斷式一成立時，可以進行的指令工作內容；
elif [ 條件判斷式二 ]; then
	當條件判斷式二成立時，可以進行的指令工作內容；
else
	當條件判斷式一與二均不成立時，可以進行的指令工作內容；
fi
